<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_repository_lib_1_1_s_v_n_file_repository" xml:lang="en-US">
<title>RepositoryLib.SVNFileRepository Class Reference</title>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a1a14d7e753a170ef18c701e4243b8039">SVNFileRepository</link> (<link linkend="_class_repository_lib_1_1_s_v_n_file_repository_config">SVNFileRepositoryConfig</link> config)</para>

<para>Init repository classx </para>
</listitem>
            <listitem><para>bool <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a0f2044e2e8625796bc786160e7b6723a">ContainsSubPath</link> (string pathToFile, string subPath)</para>

<para>Check if path contain subpath </para>
</listitem>
            <listitem><para>string <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a227649161aaa91fe2d01450940fc383d">Download</link> (string id, ConflictCallback onConflict=null)</para>

<para>Download file from repository If onConflict is null all local changes will be overwriten by remote changes If onConflict is set then all entries marked as true will not be overwriten </para>
</listitem>
            <listitem><para>SvnClient <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a7d77a19f0b97e0a8ad668cbfe04c0533">InitSvnClient</link> ()</para>

<para>Initialize svn client </para>
</listitem>
            <listitem><para>void <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a78e84186a15dbe923bd1ebbf0b9210a8">Delete</link> (string path, ConflictCallback onConflict=null)</para>

<para>Delete file entry from repository </para>
</listitem>
            <listitem><para>string <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a286a3756eb2afe7e9efefa3985dbdcd9">Upload</link> (string filePath, ConflictCallback onConflict=null)</para>

<para>Upload file to svn server </para>
</listitem>
            <listitem><para>void <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a79265189b4b22aaf7de7364f43a69495">Pull</link> (ConflictCallback onConflict=null)</para>

<para>Pull changes from svn server. If onConflict is null all local changes will be overwriten by remote changes If onConflict is set then all entries which marked as true will not be overwriten by remote changes. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a05f9ec0fa14ef3493962e67ac4ae7f17">underSvnControl</link> (string filePath)</para>

<para>Check if file is under svn </para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1abb2d09255391481a1b16925b8736dbdd"/>void <emphasis role="strong">Dispose</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static string <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a7a5e8e36d27f042453b0e414cb685342">GenerateFilename</link> (string path)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Properties    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a6db015b912b29e2b0c1d0b0070501af8"/><link linkend="_class_repository_lib_1_1_s_v_n_file_repository_config">SVNFileRepositoryConfig</link> <emphasis role="strong">Config</emphasis><computeroutput> [getprivate set]</computeroutput>
</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a7cbaf71b240883207dfa64dc52618ca4"/><link linkend="_class_repository_lib_1_1_conflict_data">ConflictData</link> <emphasis role="strong">Conflict</emphasis><computeroutput> [getset]</computeroutput>
</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>string <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1aa51954e313721b94c72e5bcc4260a6ba">GetRelativePath</link> (string filespec, string folder)</para>

<para>Get relative path to entry folder </para>
</listitem>
            <listitem><para>List&lt; string &gt; <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a6cc2e8a75e002dd2ead27a36d3d9f3b8">GetAllFilesAndDirs</link> (string dirPath)</para>

<para>Get all files and directories from folder dirPath </para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a4c0cf36cf57622ec54f534cd80302782"/>client. <emphasis role="strong">CheckOut</emphasis> (new SvnUriTarget(svnUrl), svnFolder, checkoutArgs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1ac08adefb418e76a2892a45cfdef05645"/><emphasis role="strong">if</emphasis> (!Directory.Exists(svnFolder)) Directory.CreateDirectory(svnFolder)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a71f1c4ac256c0952c058620711884628"/>Console. <emphasis role="strong">Write</emphasis> (&quot;Local directory: &quot;+svnFolder)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a05ea79b8827893258a8bf071fa999b27"/>Conflict.ConflictEntries. <emphasis role="strong">Clear</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a9978b9b998bfea62c2f09cf814f52361"/>client. <emphasis role="strong">Update</emphasis> (svnFolder, updateArgs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a1c170e8395b1e3d35acf64e3d508469d"/><emphasis role="strong">if</emphasis> (Conflict.IsConflict)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1aa5b254c5f0415d7d70db24a64b533fef"/>localEntries. <emphasis role="strong">RemoveAll</emphasis> (dir=&gt; dir.Trim().EndsWith(&quot;.svn&quot;))</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a32f2e5f49ffb57793fcb2cb31d031a55"/>localEntries. <emphasis role="strong">RemoveAll</emphasis> (dir=&gt; <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a0f2044e2e8625796bc786160e7b6723a">ContainsSubPath</link>(dir, &quot;.svn&quot;))</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a5a598f7161b6b231ba3b4fba55dc6e11"/><emphasis role="strong">foreach</emphasis> (var dir in localEntries) if(!<link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a05f9ec0fa14ef3493962e67ac4ae7f17">underSvnControl</link>(dir)) client.Add(dir)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a9db4b44f2ab3a9757ce5f9aceb8fa90a"/><emphasis role="strong">foreach</emphasis> (var entry in changedFiles) commitMsg+</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a0741b24c0fe5a14abc16c2bfb5ad4a6b"/>client. <emphasis role="strong">Commit</emphasis> (svnFolder, commitArgs)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a4afc1f5d9d590d0fa1e417a8d898742a"/><emphasis role="strong">catch</emphasis> (Exception e)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1aa5cf306e7e7bf1f4d88016e4addddd7a"/>SvnClient <emphasis role="strong">client</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1ab1e54645c7bdfa021e1531fd20f1c07d"/>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:SyncSVN/syncsvn.cs&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD=======&gt; &gt; &gt; &gt; &gt; &gt; &gt; develop:SyncSVN/SyncSVN.cs private SvnRevision getLatestRevision() { SvnInfoEventArgs info;var svnUrl=Config.configData[&quot;SvnUrl&quot;];Uri repos=new Uri(svnUrl);client.GetInfo(repos, out info);return info.Revision;} private void setConflict(object sender, SvnConflictEventArgs e) { Conflict.IsConflict=true;if(e.ConflictAction==SvnConflictAction.Delete &amp;&amp;e.ConflictReason==SvnConflictReason.Edited) { Conflict.ConflictEntries.Add(Path.Combine(Config.configData[&quot;RootPath&quot;], e.Path));Conflict.Action=SvnConflictAction.Delete;Conflict.Reason=SvnConflictReason.Edited;return;} Conflict.IsConflict=true;Conflict.ConflictEntries.Add(e.MergedFile);} private List&lt; string &gt; getModifiedEntries(string path) { List&lt; string &gt; entries=new List&lt; string &gt;();lock(client) { Collection&lt; SvnStatusEventArgs &gt; changedFiles=new Collection&lt; SvnStatusEventArgs &gt;();client.GetStatus(path, out changedFiles);foreach(SvnStatusEventArgs changedFile in changedFiles) if(changedFile.LocalContentStatus==SvnStatus.Modified) entries.Add(changedFile.Path);} return entries;}&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:SyncSVN/syncsvn.cs=======&gt; &gt; &gt; &gt; &gt; &gt; &gt; 4d5088394b67ca434099993e93ad79e83b5f6073=======&gt; &gt; &gt; &gt; &gt; &gt; <emphasis role="strong">develop</emphasis>:SyncSVN/SyncSVN.cs public void Checkout() { var svnFolder = Config.configData[&quot;RootPath&quot;]</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a58462ebda889bd64b1578c5be3f61250"/>var <emphasis role="strong">svnUrl</emphasis> = Config.configData[&quot;SvnUrl&quot;]</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a7bc010bb0b36a08a019c47dfdb8aecce"/>var <emphasis role="strong">checkoutArgs</emphasis> = new SvnCheckOutArgs { }</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1abe8d75433743a231a397233c80902f7f"/>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:SyncSVN/syncsvn.cs&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD=======private SvnRevision getLatestRevision() { SvnInfoEventArgs info;var svnUrl=Config.configData[&quot;SvnUrl&quot;];Uri repos=new Uri(svnUrl);client.GetInfo(repos, out info);return info.Revision;} private void setConflict(object sender, SvnConflictEventArgs e) { Conflict.IsConflict=true;if(e.ConflictAction==SvnConflictAction.Delete &amp;&amp;e.ConflictReason==SvnConflictReason.Edited) { Conflict.ConflictEntries.Add(Path.Combine(Config.configData[&quot;RootPath&quot;], e.Path));Conflict.Action=SvnConflictAction.Delete;Conflict.Reason=SvnConflictReason.Edited;return;} Conflict.IsConflict=true;Conflict.ConflictEntries.Add(e.MergedFile);} private List&lt; string &gt; getModifiedEntries(string path) { List&lt; string &gt; entries=new List&lt; string &gt;();lock(client) { Collection&lt; SvnStatusEventArgs &gt; changedFiles=new Collection&lt; SvnStatusEventArgs &gt;();client.GetStatus(path, out changedFiles);foreach(SvnStatusEventArgs changedFile in changedFiles) { if(changedFile.LocalContentStatus==SvnStatus.Modified) { entries.Add(changedFile.Path);} } } return entries;} &gt; &gt; &gt; &gt; &gt; &gt; &gt; 4d5088394b67ca434099993e93ad79e83b5f6073=======&gt; &gt; &gt; &gt; &gt; &gt; <emphasis role="strong">develop</emphasis>:SyncSVN/SyncSVN.cs public void Push(ConflictCallback onConflict = null) { lock (client) { var svnFolder = Config.configData[&quot;RootPath&quot;]</para>
</listitem>
            <listitem><para><link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a21892a0fdf41e3e31d6bc1124e3b1736">try</link></para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a76d1fd7eb34ff9b1cac30c8a4c121c23"/>SvnUpdateArgs <emphasis role="strong">updateArgs</emphasis> = new SvnUpdateArgs()</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a67558da127b252024672f1ac6a1100db"/>updateArgs. <emphasis role="strong">Conflict</emphasis> = new EventHandler&lt;SvnConflictEventArgs&gt;(setConflict)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a5d8b7a3a582540e096611bbc96b5e4fb"/>Conflict. <emphasis role="strong">IsConflict</emphasis> = false</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1aa6ea4ad9cf787b524f0b4324b73703c3"/>List&lt; string &gt; <emphasis role="strong">localEntries</emphasis> = <link linkend="_class_repository_lib_1_1_s_v_n_file_repository_1a6cc2e8a75e002dd2ead27a36d3d9f3b8">GetAllFilesAndDirs</link>(svnFolder)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1aa1e8c48215a0b6e464f1b5d71c206d00"/>var <emphasis role="strong">changedFiles</emphasis> = getModifiedEntries(svnFolder)</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1ad8ecad832f9926773d55d5b0dfa7406f"/>string <emphasis role="strong">commitMsg</emphasis> = &quot;Next files was modified: \n&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a55d8d048ce028face4ccf8d8657a2f02"/><emphasis role="strong">commitMsg</emphasis> = &quot;\n&quot;</para>
</listitem>
            <listitem><para><anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1ac4e16f283289d0eb9c85d4c6a633352c"/>var <emphasis role="strong">commitArgs</emphasis> = new SvnCommitArgs { LogMessage = commitMsg}</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a1a14d7e753a170ef18c701e4243b8039"/><section>
    <title>SVNFileRepository()</title>
<indexterm><primary>SVNFileRepository</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>SVNFileRepository</secondary></indexterm>
<para><computeroutput>RepositoryLib.SVNFileRepository.SVNFileRepository (<link linkend="_class_repository_lib_1_1_s_v_n_file_repository_config">SVNFileRepositoryConfig</link> config)</computeroutput></para><para>

<para>Init repository classx </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>config</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a0f2044e2e8625796bc786160e7b6723a"/><section>
    <title>ContainsSubPath()</title>
<indexterm><primary>ContainsSubPath</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>ContainsSubPath</secondary></indexterm>
<para><computeroutput>bool RepositoryLib.SVNFileRepository.ContainsSubPath (string pathToFile, string subPath)</computeroutput></para><para>

<para>Check if path contain subpath </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pathToFile</entry><entry></entry>
                            </row>
                            <row>
<entry>subPath</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a78e84186a15dbe923bd1ebbf0b9210a8"/><section>
    <title>Delete()</title>
<indexterm><primary>Delete</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>Delete</secondary></indexterm>
<para><computeroutput>void RepositoryLib.SVNFileRepository.Delete (string path, ConflictCallback onConflict = <computeroutput>null</computeroutput>
)</computeroutput></para><para>

<para>Delete file entry from repository </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>path</entry><entry></entry>
                            </row>
                            <row>
<entry>onConflict</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a227649161aaa91fe2d01450940fc383d"/><section>
    <title>Download()</title>
<indexterm><primary>Download</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>Download</secondary></indexterm>
<para><computeroutput>string RepositoryLib.SVNFileRepository.Download (string id, ConflictCallback onConflict = <computeroutput>null</computeroutput>
)</computeroutput></para><para>

<para>Download file from repository If onConflict is null all local changes will be overwriten by remote changes If onConflict is set then all entries marked as true will not be overwriten </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry></entry>
                            </row>
                            <row>
<entry>onConflict</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a7a5e8e36d27f042453b0e414cb685342"/><section>
    <title>GenerateFilename()</title>
<indexterm><primary>GenerateFilename</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>GenerateFilename</secondary></indexterm>
<para><computeroutput>static string RepositoryLib.SVNFileRepository.GenerateFilename (string path)<computeroutput>[static]</computeroutput></computeroutput></para><para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>path</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a6cc2e8a75e002dd2ead27a36d3d9f3b8"/><section>
    <title>GetAllFilesAndDirs()</title>
<indexterm><primary>GetAllFilesAndDirs</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>GetAllFilesAndDirs</secondary></indexterm>
<para><computeroutput>List&lt; string &gt; RepositoryLib.SVNFileRepository.GetAllFilesAndDirs (string dirPath)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Get all files and directories from folder dirPath </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dirPath</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1aa51954e313721b94c72e5bcc4260a6ba"/><section>
    <title>GetRelativePath()</title>
<indexterm><primary>GetRelativePath</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>GetRelativePath</secondary></indexterm>
<para><computeroutput>string RepositoryLib.SVNFileRepository.GetRelativePath (string filespec, string folder)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Get relative path to entry folder </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filespec</entry><entry></entry>
                            </row>
                            <row>
<entry>folder</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a7d77a19f0b97e0a8ad668cbfe04c0533"/><section>
    <title>InitSvnClient()</title>
<indexterm><primary>InitSvnClient</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>InitSvnClient</secondary></indexterm>
<para><computeroutput>SvnClient RepositoryLib.SVNFileRepository.InitSvnClient ( )</computeroutput></para><para>

<para>Initialize svn client </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a79265189b4b22aaf7de7364f43a69495"/><section>
    <title>Pull()</title>
<indexterm><primary>Pull</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>Pull</secondary></indexterm>
<para><computeroutput>void RepositoryLib.SVNFileRepository.Pull (ConflictCallback onConflict = <computeroutput>null</computeroutput>
)</computeroutput></para><para>

<para>Pull changes from svn server. If onConflict is null all local changes will be overwriten by remote changes If onConflict is set then all entries which marked as true will not be overwriten by remote changes. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>onConflict</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a05f9ec0fa14ef3493962e67ac4ae7f17"/><section>
    <title>underSvnControl()</title>
<indexterm><primary>underSvnControl</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>underSvnControl</secondary></indexterm>
<para><computeroutput>bool RepositoryLib.SVNFileRepository.underSvnControl (string filePath)</computeroutput></para><para>

<para>Check if file is under svn </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filePath</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a286a3756eb2afe7e9efefa3985dbdcd9"/><section>
    <title>Upload()</title>
<indexterm><primary>Upload</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>Upload</secondary></indexterm>
<para><computeroutput>string RepositoryLib.SVNFileRepository.Upload (string filePath, ConflictCallback onConflict = <computeroutput>null</computeroutput>
)</computeroutput></para><para>

<para>Upload file to svn server </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filePath</entry><entry></entry>
                            </row>
                            <row>
<entry>onConflict</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_repository_lib_1_1_s_v_n_file_repository_1a21892a0fdf41e3e31d6bc1124e3b1736"/><section>
    <title>try</title>
<indexterm><primary>try</primary><secondary>RepositoryLib.SVNFileRepository</secondary></indexterm>
<indexterm><primary>RepositoryLib.SVNFileRepository</primary><secondary>try</secondary></indexterm>
<para><computeroutput>RepositoryLib.SVNFileRepository.try<computeroutput>[private]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!client.IsWorkingCopy(svnFolder))&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;checkoutArgs&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;SvnCheckOutArgs&#32;{&#32;};
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client.CheckOut(<emphasis role="keyword">new</emphasis>&#32;SvnUriTarget(svnUrl),&#32;svnFolder,&#32;checkoutArgs);&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.Write(<emphasis role="stringliteral">&quot;Push&#32;changes&#32;to&#32;directory&#32;remote&#32;repository&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>)
</programlisting></section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/belya/source/repos/SyncSVN/SyncSVN/SyncSVN.cs</section>
</section>
